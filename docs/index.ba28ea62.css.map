{"mappings":"ACsDE,iDAGC,4JAUD,0EAKA,uDAEC,yDCqEO,uCAIA,uEAQA,kHAYR,oEAGC,kFAKA,kFAOD,2DAIA,yBACI,qEAKJ,0EAIA,mEAKA,8EAIC,iDAMD,4CAEC,wGAUD,8EAEC,yBAE0B,qEAKzB,gFAGD,uGAIA,yBAE0B,gFAM3B,6GAIA,yBACI,sFAKJ,uHAQA,4EAKA,mEAEC,iEAIA,6CAUD,oDAIA,wEAKA,8EAKA,oEAMA,kFAMQ,+CAGP,6EAUA,6EAYD,2DAaA,kFAIC,uEAMD,kDAIQ,sCAEP,+CAOO,kCAEP,+DASO","sources":["index.ba28ea62.css","src/Diagram.svelte","src/App.svelte"],"sourcesContent":["svg.svelte-1q5u4ch {\n  width: 100%;\n  background: #fafafa;\n}\n\n.grid.svelte-1q5u4ch {\n  grid-column-gap: 5px;\n  grid-row-gap: 5px;\n  grid-template-rows: min-content 1fr;\n  grid-template-columns: min-content 1fr min-content;\n  display: grid;\n}\n\n.y-label.svelte-1q5u4ch {\n  writing-mode: vertical-rl;\n  transform: rotate(180deg);\n}\n\n.y-label-right.svelte-1q5u4ch {\n  writing-mode: vertical-rl;\n}\n\n.border.svelte-1q5u4ch {\n  stroke: #adadad;\n  stroke-width: .25px;\n}\n\n*, :before, :after {\n  box-sizing: border-box;\n}\n\nbody {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: sans-serif;\n}\n\n.sr-only {\n  width: 1px;\n  height: 1px;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n  margin: -1px;\n  padding: 0;\n  position: absolute;\n  overflow: hidden;\n}\n\n.grid.svelte-1s34n3c.svelte-1s34n3c {\n  align-items: center;\n  display: grid;\n}\n\n.grid-gap-20.svelte-1s34n3c.svelte-1s34n3c {\n  grid-row-gap: 20px;\n  grid-column-gap: 20px;\n}\n\n.grid-gap-10.svelte-1s34n3c.svelte-1s34n3c {\n  grid-row-gap: 10px;\n  grid-column-gap: 10px;\n}\n\n.grid-span-2.svelte-1s34n3c.svelte-1s34n3c {\n  grid-column: 1 / 3;\n}\n\n@media (min-width: 768px) {\n  .grid-span-3-when-big.svelte-1s34n3c.svelte-1s34n3c {\n    grid-column: 1 / 4;\n  }\n}\n\n.grid-2fr-1fr.svelte-1s34n3c.svelte-1s34n3c {\n  grid-template-columns: 2fr 1fr;\n}\n\n.input-wrap.svelte-1s34n3c.svelte-1s34n3c {\n  min-width: 0;\n  display: flex;\n}\n\n.input-wrap.svelte-1s34n3c input.svelte-1s34n3c {\n  width: 0;\n  max-width: 100%;\n  flex: 1;\n}\n\n.flex.svelte-1s34n3c.svelte-1s34n3c {\n  display: flex;\n}\n\n.flex.svelte-1s34n3c > .svelte-1s34n3c {\n  flex: 1;\n}\n\n.flex-h.svelte-1s34n3c.svelte-1s34n3c, .flex-h-when-big.svelte-1s34n3c.svelte-1s34n3c {\n  flex-direction: row;\n}\n\n.flex-h-when-big.svelte-1s34n3c > .svelte-1s34n3c:first-child {\n  margin-right: 20px;\n}\n\n@media (max-width: 767px) {\n  .flex-h-when-big.svelte-1s34n3c.svelte-1s34n3c {\n    flex-direction: column;\n  }\n\n  .flex-h-when-big.svelte-1s34n3c > .svelte-1s34n3c:first-child {\n    margin-bottom: 20px;\n  }\n}\n\n.fabric-piece-grid.svelte-1s34n3c.svelte-1s34n3c {\n  grid-template-columns: min-content 1fr min-content 1fr;\n}\n\n@media (max-width: 767px) {\n  .fabric-piece-grid.svelte-1s34n3c.svelte-1s34n3c {\n    grid-template-columns: 2fr 1fr;\n  }\n}\n\n.fabric-piece-input-grid.svelte-1s34n3c.svelte-1s34n3c {\n  grid-template-columns: min-content 1fr min-content 1fr;\n}\n\n@media (max-width: 767px) {\n  .fabric-piece-input-grid.svelte-1s34n3c.svelte-1s34n3c {\n    grid-template-columns: 2fr 1fr;\n  }\n}\n\n.indicator.svelte-1s34n3c.svelte-1s34n3c {\n  width: 1em;\n  height: 1em;\n  border-radius: 1px;\n  margin-right: 10px;\n  display: inline-block;\n}\n\n.center-h.svelte-1s34n3c.svelte-1s34n3c {\n  justify-content: center;\n  display: flex;\n}\n\n.text-align-center.svelte-1s34n3c.svelte-1s34n3c {\n  text-align: center;\n}\n\n.text-align-right.svelte-1s34n3c.svelte-1s34n3c {\n  text-align: right;\n}\n\n.flex-1.svelte-1s34n3c.svelte-1s34n3c {\n  flex: 1;\n}\n\n.flex-gap-10.svelte-1s34n3c.svelte-1s34n3c {\n  gap: 10px;\n}\n\n.center-v.svelte-1s34n3c.svelte-1s34n3c {\n  align-items: center;\n  display: flex;\n}\n\n.left-h.svelte-1s34n3c.svelte-1s34n3c {\n  justify-content: flex-start;\n  display: flex;\n}\n\nul.svelte-1s34n3c.svelte-1s34n3c {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\nli.svelte-1s34n3c.svelte-1s34n3c {\n  border: 1px solid #ccc;\n  margin: 10px 0;\n  padding: 10px;\n}\n\n.pad-v-10 {\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n\n.pad-v-20.svelte-1s34n3c.svelte-1s34n3c {\n  padding-top: 20px;\n  padding-bottom: 20px;\n}\n\n.pad-h-10.svelte-1s34n3c.svelte-1s34n3c {\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n.error-message.svelte-1s34n3c.svelte-1s34n3c {\n  color: #8b0000;\n}\n\nbutton.svelte-1s34n3c.svelte-1s34n3c {\n  cursor: pointer;\n  padding: 2px 5px;\n  font-size: 1em;\n}\n\nbutton.min-touch-target.svelte-1s34n3c.svelte-1s34n3c {\n  padding: 2px 10px;\n}\n\ninput.svelte-1s34n3c.svelte-1s34n3c {\n  font-size: 1em;\n}\n\ninput[type=\"checkbox\"] {\n  margin-right: 7px;\n}\n\na, a:visited {\n  color: #3d63d4;\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\nfooter {\n  color: #333;\n  margin-top: 60px;\n  padding: 10px;\n  font-size: .9rem;\n}\n\ninput[type=\"numeric\"], input[type=\"text\"] {\n  min-width: 0;\n}\n\n/*# sourceMappingURL=index.ba28ea62.css.map */\n","<section aria-label=\"Diagram {width} wide by {height} long\">\n  <ul class=\"sr-only\" aria-label=\"Fabric pieces drawn in the diagram\">\n      {#each items as item, i (item.id)}\n        <li>Fabric piece #{i + 1}: {item.width} wide by {item.height} long, at position {item.x}, {item.y}</li>\n      {/each}\n  </ul>\n  <div class=\"grid\" aria-hidden=\"true\">\n    <div/>\n    <div class=\"x-label\">\n        {width}\"\n    </div>\n    <div/>\n    <div class=\"y-label\">\n        {height}\" (selvage)\n    </div>\n    <div>\n      <svg xmlns=\"http://www.w3.org/2000/svg\"\n           viewBox=\"0 0 {width} {height}\"\n      >\n        <!-- rectangles -->\n          {#each items as item, i (item.id)}\n            <rect x={item.x}\n                  y={item.y}\n                  width={item.width}\n                  height={item.height}\n                  fill={getColor(item.id)}\n            />\n          {/each}\n\n        <!-- gridlines -->\n        {#if showGridlines}\n          {#each dashes as dash ([dash.x1, dash.y1, dash.x2, dash.y2].join(','))}\n            <line x1={dash.x1} y1={dash.y1} x2={dash.x2} y2={dash.y2}\n                  class=\"border\" stroke-dasharray=\"1\" />\n          {/each}\n        {/if}\n        <!-- border -->\n        <rect class=\"border\" x=\"0\" y=\"0\" {width} {height} fill-opacity=\"0\"></rect>\n      </svg>\n    </div>\n    <div class=\"y-label-right\">\n      (selvage)\n    </div>\n  </div>\n  <div>\n    <div class=\"pad-v-10\">\n    <label>\n      <input type=\"checkbox\" bind:checked={showGridlines}>\n      <span>Show gridlines</span>\n    </label>\n    </div>\n  </div>\n</section>\n<style>\n  svg {\n    background: #fafafa;\n    width: 100%;\n  }\n\n  .grid {\n    display: grid;\n    grid-template-columns: min-content 1fr min-content;\n    grid-template-rows: min-content 1fr;\n    grid-column-gap: 5px;\n    grid-row-gap: 5px;\n  }\n\n  .y-label {\n    writing-mode: vertical-rl;\n    transform: rotate(180deg);\n  }\n\n  .y-label-right {\n    writing-mode: vertical-rl;\n  }\n\n  .border {\n    stroke: #adadad;\n    stroke-width: 0.25;\n  }\n</style>\n<script>\n  import { getColor } from './colors.js'\n  import { isValidNonzeroInteger } from './util.js'\n\n  let showGridlines = true\n  let dashes = []\n\n  function calculateDashes(width, height, increment) {\n    if (!isValidNonzeroInteger(increment) || !isValidNonzeroInteger(width) || !isValidNonzeroInteger(height)) {\n      return []\n    }\n    const result = []\n    for (let i = increment; i < width; i += increment) {\n      result.push({\n        x1: i,\n        y1: 0,\n        x2: i,\n        y2: height\n      })\n    }\n    for (let i = increment; i < height; i += increment) {\n      result.push({\n        x1: 0,\n        y1: i,\n        x2: width,\n        y2: i\n      })\n    }\n    return result\n  }\n\n  $: dashes = calculateDashes(width, height, increment)\n\n  export let increment\n  export let items\n  export let height\n  export let width\n</script>","<div class=\"app\">\n  <h1>Fabric calculator</h1>\n  <p>\n    This tool can calculate how much fabric you should buy based on the pieces you need to cut.\n    The default assumption is that fabric is sold by the half-yard. All values are in inches.\n  </p>\n  <div class=\"flex flex-h-when-big\">\n    <div>\n      <div class=\"pad-v-10 pad-h-10\">\n        <div class=\"grid grid-gap-20 grid-2fr-1fr\">\n          <label for=\"fabric-width\">Width of fabric you're buying:</label>\n          <div class=\"input-wrap\">\n            <input id=\"fabric-width\" type=\"number\" inputmode=\"numeric\"\n                   placeholder=\"45\" bind:value={fabricWidth}>\n          </div>\n          <label for=\"fabric-increment\">Fabric sold in increments of:</label>\n          <div class=\"input-wrap\">\n            <input id=\"fabric-increment\" type=\"number\" inputmode=\"numeric\"\n                   placeholder=\"18\" bind:value={fabricSoldBy}>\n          </div>\n          <div class=\"grid-span-2\">\n            <input id=\"fabric-rotation\" type=\"checkbox\" bind:checked={allowRotation}>\n            <label for=\"fabric-rotation\">Allow rotation of fabric pieces</label>\n          </div>\n        </div>\n      </div>\n      <div>\n        <h2>Pieces of fabric</h2>\n        <h3 class=\"sr-only\">Add pieces of fabric</h3>\n        <div class=\"pad-h-10\">\n          <div class=\"grid pad-v-10 fabric-piece-input-grid grid-gap-20\">\n            <div>\n              <label for=\"fabric-width-default\">Width:</label>\n            </div>\n            <div class=\"input-wrap\">\n              <input id=\"fabric-width-default\" type=\"number\" inputmode=\"numeric\"\n                     placeholder=\"10\" bind:value={widthOfFabricToAdd}>\n            </div>\n            <div>\n              <label for=\"fabric-height-default\">Length:</label>\n            </div>\n            <div class=\"input-wrap\">\n              <input id=\"fabric-height-default\" type=\"number\" inputmode=\"numeric\"\n                     placeholder=\"10\" bind:value={heightOfFabricToAdd}>\n            </div>\n            <div class=\"grid-span-3-when-big\">\n              <label for=\"fabric-pieces-to-add\">Number of pieces to add:</label>\n            </div>\n            <div class=\"input-wrap\">\n              <input type=\"number\" min=\"1\" inputmode=\"numeric\" step=\"1\"\n                     placeholder=\"1\" id=\"fabric-pieces-to-add\"\n                     bind:value={numFabricPiecesToAdd}>\n            </div>\n          </div>\n          <div class=\"pad-v-10 flex flex-h flex-gap-10\">\n            <div class=\"flex center-h flex-1\">\n              <button type=\"button\" on:click={addFabricPieces}>\n                {#if numFabricPiecesToAdd > 1}\n                  Add fabric pieces\n                {:else}\n                  Add fabric piece\n                {/if}\n              </button>\n            </div>\n            <div class=\"flex center-h flex-1\">\n              <button type=\"button\" on:click={removeAll} disabled={!fabricPieces.length}>Remove all</button>\n            </div>\n          </div>\n        </div>\n        {#if fabricPieces.length}\n          <h3 class=\"sr-only\">Current pieces of fabric</h3>\n          <ul class=\"pad-v-20\">\n              {#each fabricPieces as fabricPiece, i (fabricPiece.id)}\n                <li class=\"pad-v-10\">\n                  <div class=\"center-v left-h\">\n                    <div class=\"center-v left-h\">\n                      <div class=\"indicator\" style=\"background-color: {getColor(fabricPiece.id)};\"/>\n                      <strong>Fabric piece #{i + 1}</strong>\n                    </div>\n                    <div class=\"flex-1 text-align-right\">\n                      <button class=\"min-touch-target\"\n                              type=\"button\"\n                              aria-label=\"Remove\"\n                              title=\"Remove\"\n                              on:click={() => removeFabricPiece(i)}>\n                        &times;\n                      </button>\n                    </div>\n                  </div>\n                  <div class=\"grid grid-gap-10 pad-v-10 fabric-piece-grid\">\n                    <div>\n                      <label for=\"fabric-width-{i}\">Width:</label>\n                    </div>\n                    <div class=\"input-wrap\">\n                      <input id=\"fabric-width-{i}\" type=\"number\" inputmode=\"numeric\"\n                             placeholder=\"10\" bind:value={fabricPieces[i].width}>\n                    </div>\n                    <div>\n                      <label for=\"fabric-height-{i}\">Length:</label>\n                    </div>\n                    <div class=\"input-wrap\">\n                      <input id=\"fabric-height-{i}\" type=\"number\" inputmode=\"numeric\"\n                             placeholder=\"10\" bind:value={fabricPieces[i].height}>\n                    </div>\n                  </div>\n                </li>\n              {/each}\n          </ul>\n        {/if}\n      </div>\n    </div>\n    <div class=\"text-align-center\">\n      <div class=\"pad-v-10\"\n           class:error-message={!showLoadingIndicator && errorMessage}\n           class:solution-message={!showLoadingIndicator && !errorMessage && solution}>\n        {#if showLoadingIndicator}\n          Calculating…\n        {:else if errorMessage}\n          {errorMessage}\n        {:else if solution}\n          You need a piece of fabric <strong>{solution.fabricHeight} inches</strong> long\n        {:else}\n          &nbsp;\n        {/if}\n      </div>\n      {#if !showLoadingIndicator && !errorMessage && solution}\n        <div transition:fade=\"{{duration: 250}}\">\n          <Diagram\n            items={solution.items}\n            width={fabricWidth}\n            height={solution.fabricHeight}\n            increment={fabricSoldBy}\n          />\n        </div>\n      {/if}\n    </div>\n  </div>\n  <footer>\n    Created by <a href=\"https://nolanlawson.com\" target=\"_blank\" rel=\"noopener\">Nolan Lawson</a>.\n    See the <a href=\"https://github.com/nolanlawson/fabric-calculator\">source code</a>.\n  </footer>\n</div>\n<style>\n  :global(*, *::before, *::after) {\n    box-sizing: border-box;\n  }\n\n  :global(body) {\n    font-family: sans-serif;\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n  }\n\n  /* via https://stackoverflow.com/a/19758620 */\n  :global(.sr-only) {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    border: 0;\n  }\n\n\n  .grid {\n    display: grid;\n    align-items: center;\n  }\n\n  .grid-gap-20 {\n    grid-row-gap: 20px;\n    grid-column-gap: 20px;\n  }\n\n  .grid-gap-10 {\n    grid-row-gap: 10px;\n    grid-column-gap: 10px;\n  }\n\n  .grid-span-2 {\n    grid-column: 1 / 3;\n  }\n\n  @media (min-width: 768px) {\n      .grid-span-3-when-big {\n          grid-column: 1 / 4;\n      }\n  }\n\n  .grid-2fr-1fr {\n    grid-template-columns: 2fr 1fr;\n  }\n\n  .input-wrap {\n    min-width: 0;\n    display: flex;\n  }\n\n  .input-wrap input {\n    flex: 1;\n    width: 0;\n    max-width: 100%;\n  }\n\n  .flex {\n    display: flex;\n  }\n\n  .flex > * {\n    flex: 1;\n  }\n\n  .flex-h {\n    flex-direction: row;\n  }\n\n  .flex-h-when-big {\n    flex-direction: row;\n  }\n\n  .flex-h-when-big > :first-child {\n    margin-right: 20px;\n  }\n\n  @media (max-width: 767px) {\n    .flex-h-when-big {\n      flex-direction: column;\n    }\n\n    .flex-h-when-big > :first-child {\n      margin-bottom: 20px;\n    }\n  }\n\n  .fabric-piece-grid {\n    grid-template-columns: min-content 1fr min-content 1fr;\n  }\n\n  @media (max-width: 767px) {\n    .fabric-piece-grid {\n      grid-template-columns: 2fr 1fr;\n    }\n  }\n\n  .fabric-piece-input-grid {\n      grid-template-columns: min-content 1fr min-content 1fr;\n  }\n\n  @media (max-width: 767px) {\n      .fabric-piece-input-grid {\n          grid-template-columns: 2fr 1fr;\n      }\n  }\n\n  .indicator {\n    width: 1em;\n    height: 1em;\n    border-radius: 1px;\n    display: inline-block;\n    margin-right: 10px;\n  }\n\n  .center-h {\n    display: flex;\n    justify-content: center;\n  }\n\n  .text-align-center {\n    text-align: center;\n  }\n\n  .text-align-right {\n    text-align: right;\n  }\n\n  .flex-1 {\n    flex: 1;\n  }\n\n  .flex-gap-5 {\n    gap: 5px;\n  }\n\n  .flex-gap-10 {\n    gap: 10px;\n  }\n\n  .center-v {\n    display: flex;\n    align-items: center;\n  }\n\n  .left-h {\n    display: flex;\n    justify-content: flex-start;\n  }\n\n  ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  li {\n    margin: 10px 0;\n    padding: 10px;\n    border: 1px solid #ccc;\n  }\n\n  :global(.pad-v-10) {\n    padding-top: 10px;\n    padding-bottom: 10px;\n  }\n\n  .pad-v-5 {\n    padding-top: 5px;\n    padding-bottom: 5px;\n  }\n\n  .pad-v-20 {\n    padding-top: 20px;\n    padding-bottom: 20px;\n  }\n\n  .pad-h-5 {\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n\n  .pad-h-10 {\n    padding-left: 10px;\n    padding-right: 10px;\n  }\n\n  .error-message {\n    color: darkred;\n  }\n\n  .label-v > * {\n    display: block;\n    padding: 5px 0;\n  }\n\n  .label-h > * {\n    padding: 10px 0;\n  }\n\n  button {\n    padding: 2px 5px;\n    font-size: 1em;\n    cursor: pointer;\n  }\n\n  button.min-touch-target {\n    padding: 2px 10px;\n  }\n\n  input {\n    font-size: 1em;\n  }\n\n  :global(input[type=checkbox]) {\n    margin-right: 7px;\n  }\n\n  :global(a, a:visited) {\n    color: #3d63d4;\n    text-decoration: none;\n  }\n\n  :global(a:hover) {\n    text-decoration: underline;\n  }\n\n  :global(footer) {\n    margin-top: 60px;\n    font-size: 0.9rem;\n    color: #333;\n    padding: 10px;\n  }\n\n  :global(input[type=numeric], input[type=text]) {\n    min-width: 0;\n  }\n\n</style>\n<script>\n  import Diagram from './Diagram.svelte'\n  import { getColor } from './colors.js'\n  import { calculateSolution } from './calculateSolution'\n  import deepIs from 'deep-is'\n  import { fade } from 'svelte/transition';\n\n  const LOADING_INDICATOR_DELAY = 200\n\n  let widthOfFabricToAdd = 10\n  let heightOfFabricToAdd = 10\n  let numFabricPiecesToAdd = 1\n  let fabricSoldBy = 18 // half a yard\n  let fabricPieces = []\n  let fabricWidth = 45\n  let allowRotation = true\n  let errorMessage = ''\n  let fabricId = -1\n  let solution\n  let showLoadingIndicator = false\n\n  function addFabricPieces () {\n    fabricPieces.push(...Array(Math.floor(numFabricPiecesToAdd)).fill().map(() => ({\n      width: widthOfFabricToAdd,\n      height: heightOfFabricToAdd,\n      id: ++fabricId\n    })))\n    fabricPieces = fabricPieces // update\n  }\n\n  function removeAll () {\n    fabricPieces = []\n  }\n\n  function removeFabricPiece (i) {\n    fabricPieces.splice(i, 1)\n    fabricPieces = fabricPieces // update\n  }\n\n  $: {\n    async function calculateFabricNeeded () {\n      const getInput = () => JSON.parse(JSON.stringify({ fabricPieces, fabricWidth, fabricSoldBy, allowRotation }))\n\n      const input = getInput()\n      if (solution && deepIs(solution.input, input)) {\n        return // avoid infinite reactivity loop\n      }\n      console.log('calculating', input)\n      const handle = setTimeout(() => {\n        showLoadingIndicator = true\n      }, LOADING_INDICATOR_DELAY)\n      try {\n        const {\n          noSolution,\n          error,\n          items,\n          fabricHeight,\n          timesCalculated\n        } = await calculateSolution(input)\n\n        if (!deepIs(getInput(), input)) {\n          return // something changed asynchronously, ignore\n        }\n\n        if (noSolution) {\n          solution = undefined\n          errorMessage = ''\n        } else if (error) {\n          solution = undefined\n          errorMessage = error\n        } else {\n          const newSolution = { items, fabricHeight, input }\n          console.log(`solution (calculated ${timesCalculated} time(s))`, newSolution)\n          solution = newSolution\n          errorMessage = ''\n        }\n      } finally {\n        clearTimeout(handle)\n        showLoadingIndicator = false\n      }\n    }\n\n    calculateFabricNeeded()\n  }\n\n</script>"],"names":[],"version":3,"file":"index.ba28ea62.css.map"}